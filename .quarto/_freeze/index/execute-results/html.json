{
  "hash": "8a11ccaa2c768d2c77b8cdab687876d0",
  "result": {
    "markdown": "---\ntitle: NanoITS\ntoc: true\n\nexecute:\n  eval: false\n\nengine: knitr\n---\n\n\nNanoITS is a classifier for long-read Oxford Nanopore data of the eukaryotic 18S/SSU-ITS1 operon. \n\nWhen giving the tool some nanopore long-read data it will:\n\n- Provide a quality report of the raw reads\n- Check the reads for adaptors and barcodes and if present trim the reads\n- Remove low-quality and short reads\n- Provide a quality report for the cleaned reads\n- Identify and separate both the ITS1 and 18S rRNA gene\n- Classify the SSU and/or ITS1 gene using kraken2 and/or minimap2\n- Generate taxonomic barplots and OTU tables\n\nFor a more detailed explanation, check out [the manual](https://ndombrowski.github.io/NanoITS/).\n\nBelow you can find the full workflow:\n\n![](img/visualization.png)\n\n\n## Quick start\n\nTo run NanoITs, install conda and snakemake and clone the directory from github via:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ngit clone https://github.com/ndombrowski/NanoITS.git\n```\n:::\n\n\nProvide your sample names and path to the samples as a comma-separated file, for example, a file looking similar as the one provided in `example_files/mapping.csv`. Sample names should be unique and consist of letter, numbers and `-` only. The barcode column can be left empty as it is not yet implemented. The path should contain the path to your demultiplexed, compressed fastq file.\n\nAdjust `config/config.yaml` to configure the location of your mapping file as well as specificy the parameters used by NanoITs.\n\nNanoITs can then be run with:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsnakemake --use-conda --cores <nr_cores> \\\n  -s <path_to_NanoITS_install>/workflow/Snakefile \\\n  --configfile config/config.yaml \\\n  --conda-prefix <path_to_NanoITS_install>/workflow/.snakemake/conda  \\\n  --rerun-incomplete --nolock -np \n```\n:::\n\n\nFor a more detailed explanation, check out [the manual](https://ndombrowski.github.io/NanoITS/).",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}